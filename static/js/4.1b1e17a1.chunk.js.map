{"version":3,"sources":["hoc/withAuthRedirect.js","components/Settings/Settings.module.css","components/Settings/Settings.jsx","utils/helpers/capitalizeString.js","components/Settings/SettingsContainer.jsx"],"names":["mapStateToProps","state","isAuthed","auth","withAuthRedirect","Component","WithAuthRedirectComponent","this","props","to","React","connect","module","exports","maxLength30","maxLength","maxLength300","maxLength100","minLength2","minLength","SettingsForm","className","css","form_layout","onSubmit","handleSubmit","form_section","form_section_name","field_label","field","Field","type","component","Input","name","text_input","validate","required","Textarea","submit_btn","Object","keys","profileInfo","contacts","map","key","string","charAt","toUpperCase","slice","reduxForm","form","Settings","wrap","updateStatus","information","data","updateUserData","initialValues","SettingsContainer","initializeSettings","isInitialized","Preloader","compose","settings","authedId","id","profileSection"],"mappings":"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","file":"static/js/4.1b1e17a1.chunk.js","sourcesContent":["import { Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuthed: state.auth.isAuthed\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class WithAuthRedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuthed) return <Redirect to=\"/login\"/>;\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToProps)(WithAuthRedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Settings_wrap__1zZcD\",\"information\":\"Settings_information__3H_v2\",\"form_layout\":\"Settings_form_layout__31mnZ\",\"form_section\":\"Settings_form_section__1vRHW\",\"form_section_name\":\"Settings_form_section_name__2i2DM\",\"field_label\":\"Settings_field_label__21nnR\",\"text_input\":\"Settings_text_input__1MbQm\",\"field\":\"Settings_field__1mFAI\",\"submit_btn\":\"Settings_submit_btn__2QsZK\"};","import React from 'react';\r\nimport css from './Settings.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../common/CustomFields/CustomFields';\r\nimport { required, maxLength, minLength } from '../../utils/validators/fieldValidators';\r\nimport { capitalizeString } from '../../utils/helpers/capitalizeString';\r\n\r\nconst maxLength30 = maxLength(30);\r\nconst maxLength300 = maxLength(300);\r\nconst maxLength100 = maxLength(100);\r\nconst minLength2 = minLength(2);\r\n\r\nlet SettingsForm = (props) => {\r\n\r\n    return (\r\n        <form className={css.form_layout} onSubmit={props.handleSubmit}>\r\n            <div className={css.form_section}>\r\n                <h3 className={css.form_section_name}>Information</h3>\r\n                <div className=\"flex_wrap\">\r\n                    <span className={css.field_label}>\r\n                        Full Name:\r\n                    </span>\r\n                    <div className={css.field}>\r\n                        <Field type=\"text\"\r\n                            component={Input}\r\n                            name=\"fullName\"\r\n                            className={css.text_input}\r\n                            validate={[required, maxLength30, minLength2]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex_wrap\">\r\n                    <span className={css.field_label}>\r\n                        About me:\r\n                    </span>\r\n                    <div className={css.field}>\r\n                        <Field type=\"text\"\r\n                            component={Textarea}\r\n                            name=\"aboutMe\"\r\n                            className={css.text_input}\r\n                            validate={[required, maxLength300]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex_wrap\">\r\n                    <span className={css.field_label}>\r\n                        I am looking for a job:\r\n                    </span>\r\n                    <div className={css.field}>\r\n                        <Field type=\"checkbox\"\r\n                            component=\"input\"\r\n                            name=\"lookingForAJob\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex_wrap\">\r\n                    <span className={css.field_label}>\r\n                        A perfect job for me:\r\n                    </span>\r\n                    <div className={css.field}>\r\n                        <Field type=\"text\"\r\n                            component={Textarea}\r\n                            name=\"lookingForAJobDescription\"\r\n                            className={css.text_input}\r\n                            validate={[maxLength100]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={css.submit_btn}>\r\n                    <button type=\"submit\">Submit all</button>\r\n                </div>\r\n            </div>\r\n            <div className={css.form_section}>\r\n                <h3 className={css.form_section_name}>Contacts</h3>\r\n                {\r\n                    Object.keys(props.profileInfo.contacts).map(key => {\r\n                        return (\r\n                            <div key={key} className=\"flex_wrap\">\r\n                                <span className={css.field_label}>\r\n                                    {capitalizeString(key) + \":\"}\r\n                                </span>\r\n                                <div className={css.field}>\r\n                                    <Field type=\"text\"\r\n                                        component={Input}\r\n                                        name={`contacts.${key}`}\r\n                                        className={css.text_input}\r\n                                        validate={[maxLength100]}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nSettingsForm = reduxForm({ form: \"settings\" })(SettingsForm);\r\n\r\nconst Settings = (props) => {\r\n    const handleSettingsUpdate = (data) => {\r\n        props.updateUserData(data);\r\n    }\r\n\r\n    return (\r\n        <div className={css.wrap}>\r\n            <div className=\"block\">\r\n                <h2 className=\"block_name\">Settings</h2>\r\n                {props.updateStatus &&\r\n                    <div className={css.information}>\r\n                        {props.updateStatus}\r\n                    </div>\r\n                }\r\n                <SettingsForm profileInfo={props.profileInfo}\r\n                    onSubmit={handleSettingsUpdate}\r\n                    initialValues={props.profileInfo}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","export const capitalizeString = (string) => {\r\n    if (typeof string !== 'string') return '';\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport Settings from './Settings';\r\nimport { updateUserData, initializeSettings } from \"../../redux/settingsReducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nclass SettingsContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeSettings();\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.isInitialized) return <Preloader/>\r\n        return <Settings {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        updateStatus: state.settings.updateStatus,\r\n        isInitialized: state.settings.isInitialized,\r\n        authedId: state.auth.id,\r\n        profileInfo: state.profileSection.profileInfo\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, { updateUserData, initializeSettings })\r\n)(SettingsContainer);"],"sourceRoot":""}